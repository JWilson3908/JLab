# -*- coding: utf-8 -*-
"""
Derivatives taken via Python using the diff function. Higher n's on the lfilters are often needed for this file

@author: John Wilson
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.signal import lfilter

class data:
    def __init__(self, m, wDisk) :
        
        self.m = m
        self.wDisk = wDisk

        
        impDir = "C:\\Users\\John Wilson\\Documents\\Physics\\J Lab\\Final\\Data for Python"
        # This import directory should contain all the folders that contain the data
        # you want to look at
        
        path = ''
        path_50 = impDir+"\\50g_Full.csv"
        path_100 = impDir+"\\100g_Fulli.csv"
        path_150 = impDir+"\\150g_Full.csv"
        path_200 = impDir+"\\200g_i0.csv"
        path_201 = impDir+"\\200g_i1.csv"
        path_202 = impDir+"\\200g_i2.csv"
        
        if self.m == 50 :
            path = path_50

        elif self.m == 100:
            path = path_100
        
        elif self.m == 150 :
            path = path_150
            
        elif self.m == 200 :
            path = path_200
            
        elif self.m == 201 :
            path = path_201
            self.m = 200
        
        elif self.m == 202:
            path = path_202
            self.m = 200
        
        self.phidata = list( np.transpose( pd.read_csv(path, usecols = [0,2] ).values.tolist() ) )
        
        for i in range( len(self.phidata) ) :
            self.phidata[i] = list( self.phidata[i] )
            
        self.tdata = list( np.transpose( pd.read_csv(path, usecols = [3,4] ).values.tolist() ) )
        
        for i in range( len(self.tdata) ) :
            self.tdata[i] = list( self.tdata[i] )
    

        '''
        The below code can be used to check every data point if they give you trouble
        '''
#        for i in range(len(self.phidata[0])) :
#            print( ' round number ' + str(i) )
#            self.phidata[0][i] = np.float64(self.phidata[0][i])
#            self.phidata[1][i] = np.float64(self.phidata[1][i])
#            self.phidata[2][i] = np.float64(self.phidata[2][i])
#            
#        self.phidata = list(self.phidata)
#        
#        for i in range(len(self.tdata[0])) :
#            print( ' round number ' + str(i) )
#            self.tdata[0][i] = np.float64(self.tdata[0][i])
#            self.tdata[1][i] = np.float64(self.tdata[1][i])
#            
#        self.tdata = list(self.tdata)
        
    def datafilter(self, dat, n) :
        
        # The higher the n the smoother the filter will be, but the more the 
        # data will be modified.
        
        b = [1.0 / n] * n
        a = 1
        return lfilter( b, a, dat )
        
    def plotdata(self) :
        
        plt.close('all')
        
        fig1 = plt.figure(1, clear = True)
        ax1 = fig1.add_subplot(111)
        ax1.set_ylabel('Theta', size = 10)
        ax1.set_xlabel('Time (s)', size = 10)
        ax1.scatter( self.tdata[0], self.tdata[1], color = 'blue', s = 0.5 )
        plt.show()
        
        fig2 = plt.figure(2, clear = True)
        ax2 = fig2.add_subplot(111)
        ax2.set_ylabel('Phi', size = 30)
        ax2.set_xlabel('Time (s)', size = 30)
        ax2.scatter( self.phidata[0], self.phidata[1], color = 'red', s = 0.5 )
        plt.show()
        
        fig3 = plt.figure(3, clear = True)
        ax3 = fig3.add_subplot(111)
        ax3.set_ylabel('Phi Dot', size = 30)
        ax3.set_xlabel('Time (s)', size = 30)
        ax3.scatter( self.phidata[0], self.dthet_dt, color = 'red', s = 0.5 )
        plt.show()
        
        fig4 = plt.figure(4, clear = True)
        ax4 = fig4.add_subplot(111)
        ax4.set_ylabel('Theta Dot', size = 30)
        ax4.set_xlabel('Time (s)', size = 30)
        ax4.scatter( self.phidata[0], self.dphi_dt, color = 'red', s = 0.5 )
        plt.show()
    
    def para_sol(self) :
        # Generates the parametric solution to be compared to theory
        
        l = min( len( self.tdata[0] ), len( self.phidata[0] ) )
        
        self.qs = np.zeros([2,l])
        
        for i in range( l ) :
            
            self.qs[0][i] = self.phidata[1][i]
            
            self.qs[1][i] = self.tdata[1][i]
            
        fig100 = plt.figure(100, clear = True)
        ax100 = fig100.add_subplot(111)
        ax100.set_ylabel('Theta', size = 10)
        ax100.set_xlabel('Phi', size = 10)
        line, = ax100.plot( self.qs[0], self.qs[1], color='blue', lw=2 )
        plt.grid()
        plt.show()
        
    def der(self) :
        self.dthet_dt = list( np.diff(self.tdata[1])/np.diff(self.tdata[0]) )
        self.dphi_dt = list( np.diff(self.phidata[1])/np.diff(self.phidata[0]) )
        
        for i in range( abs( len(self.dthet_dt) - len(self.tdata[0]) ) ) :
            self.dthet_dt = [0] + self.dthet_dt
            
        for i in range( abs( len(self.dphi_dt) - len(self.phidata[0]) ) ) :
            self.dphi_dt = [0] + self.dphi_dt
        
        
    def c(self) :
        plt.close('all')



#dtest = data(150, 2171.067)
#dtest.phidata[1] = dtest.datafilter(dtest.phidata[1],3)
#dtest.tdata[1] = dtest.datafilter(dtest.tdata[1],3)
#dtest.der()
#dtest.dthet_dt = dtest.datafilter(dtest.dthet_dt,5)
#dtest.dphi_dt = dtest.datafilter(dtest.dphi_dt,5)
#dtest.plotdata()
#dtest.para_sol()
#        
#d200 = data(200, 2171.067)
#d200.phidata[1] = d200.datafilter(d200.phidata[1],3)
#d200.tdata[1] = d200.datafilter(d200.tdata[1],3)
#d200.der()
#d200.dthet_dt = d200.datafilter(d200.dthet_dt,5)
#d200.dphi_dt = d200.datafilter(d200.dphi_dt,5)
#d200.plotdata()
#d200.para_sol()
#
#d200_1 = data(201, 2171.067)
#d200_1.phidata[1] = d200_1.datafilter(d200_1.phidata[1],3)
#d200_1.tdata[1] = d200_1.datafilter(d200_1.tdata[1],3)
#d200_1.der()
#d200_1.dthet_dt = d200_1.datafilter(d200_1.dthet_dt,5)
#d200_1.dphi_dt = d200_1.datafilter(d200_1.dphi_dt,5)
#d200_1.plotdata()
#d200_1.para_sol()
        
#d200_2 = data(202, 2171.067)
#d200_2.phidata[1] = d200_2.datafilter(d200_2.phidata[1],3)
#d200_2.tdata[1] = d200_2.datafilter(d200_2.tdata[1],3)
#d200_2.der()
#d200_2.dthet_dt = d200_2.datafilter(d200_2.dthet_dt,5)
#d200_2.dphi_dt = d200_2.datafilter(d200_2.dphi_dt,5)
#d200_2.plotdata()
#d200_2.para_sol()
